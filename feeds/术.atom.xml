<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>如是我闻</title><link href="FEED_DOMAIN%20=%20http://www.example.com/" rel="alternate"></link><link href="FEED_DOMAIN%20=%20http://www.example.com/feeds/%E6%9C%AF.atom.xml" rel="self"></link><id>FEED_DOMAIN = http://www.example.com/</id><updated>2013-02-21T00:00:00+08:00</updated><entry><title>pelican的前世今生（译）</title><link href="FEED_DOMAIN%20=%20http://www.example.com/pelicande-qian-shi-jin-sheng-yi.html" rel="alternate"></link><updated>2013-02-21T00:00:00+08:00</updated><author><name>碧落</name></author><id>tag:FEED_DOMAIN = www.example.com,2013-02-21:pelicande-qian-shi-jin-sheng-yi.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pelican-zh.readthedocs.org/en/latest/report/"&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pelican是一个简单的静态博客生成器。它分析由Markdown或是reStructuredText写就的标记语言文档，并产生一个包括了建博客所需的所有HTML文件的文件夹。考虑到Python语言较为简单且能满足我的所有需求，我选择了它来开发Pelican。我并不想为每一样事物都定义一个类(class)，但仍希望所有东西都能宽松的耦合。结果证明这正是我想要的。也要感谢一些用户们时不时的极有价值的反馈，我每次都只需很少的时间来修复一些bug。到目前为止，我已经彻底重构了Pelican的代码两次，每次都不到30分钟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican的方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早先，我是WordPress用户，WordPress是用PHP语言开发的博客平台，支持在PHP和MySQL的服务器上架设并管理自己的博客。大多数时候，我更喜欢用诸如Markdown、reStructuredText这样的标记语言来写文章，还有，我都是用vim来写的！我觉得让人们有选择他们自己喜欢的文本编辑器来写文章的自由是非常重要的！在我看来，一个博客管理器只要能把无论什么格式的输入文件转化成一个博客这件事做好就可以了。这就是Pelican的用途，可以让你选择你钟爱的任何编辑器，使用你想用的标记语言，来生成一个静态的HTML博客站点。 &lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican" src="http://pelican-zh.readthedocs.org/en/latest/_images/overall.png" /&gt;&lt;/p&gt;
&lt;p&gt;出于足够灵活的考虑，Pelican提供模板支持，只要你想要，便能轻松地写出你自己的模板。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pelican 来自我个人的需求，起初，它只是只有一个文件的程序，渐渐的，它已经茁壮成长成现在这样了。最初，我写下我希望能够实现的功能，然后写了一个reStructuredText文件来作为语法分析的测试用例，并开始反复试验和修改代码。当Pelican第一次可用时，它有200行代码，包含了差不多10个函数和一个类&lt;/p&gt;
&lt;p&gt;开发过程中，总是会冒出各种各样不同的问题，而我也总是想实现更多的功能。支持setting file，是我想要添加的第一个功能。在这之前，Pelican其实也可以通过命令行传递一些选项来实现设置功能，但当选项一多，这样做就十分繁琐和无聊了。后来，以同样的方式，我添加了Atom feeds,多种主题，多种标记语言支持等等。某种意义上这表明，我把Pelican程序全写在一个文件里是有问题的，因此，我决定全部推倒，把程序分散到多个不同的文件里，从头再写一遍。&lt;/p&gt;
&lt;p&gt;从逻辑的角度出发，我区分了一些类和内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;writer类，负责生成最终的所有文件，不管是.html文件还是RSS feeds或是其它东西。writer对象一产生，接着便是将它们传递给generator对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reader类，可以读入不同格式的文件（目前还仅支持Markdown和reStructuredText，但系统是可以扩展的),给定一个文件，返回诸如作者、标签、分类目录这样的元数据以及html格式的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generator类生成不同的输出。举个例子，Pelican有一个文章生成器（ArticlesGenerator）还有一个页面生成器（PagesGenerator），他们一块来生成些别的东西。给定一个配置，他们便会按照你的配置去做。多数情况下，pelican根据用户输入的文件来产生输出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我还处理了那些容器对象，不管是Aticles,Pages,Quotes还是你自己定制的，所有用来展现内容的对象都可以在contents.py里被定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多细节&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一张Pelican所有类的关系图. 
&lt;img alt="pelican" src="http://pelican-zh.readthedocs.org/en/latest/_images/uml.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;由于我用了鸭子类型，而不是接口，所以上图中的接口(interface)并不存在，之所以画出来，只是为了让整幅图像更加清晰而已。 Pelican内部是这么运行的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，对用户输入的命令行进行语法分析，其中的某些内容被用来初始化不同的generator类的对象。&lt;/li&gt;
&lt;li&gt;接着，产生一个context，它包含一些从命令行的来的设置，如果有setting file的话，还要包括setting file。&lt;/li&gt;
&lt;li&gt;然后，每个generator对象的generate_context方法被调用，更新context。&lt;/li&gt;
&lt;li&gt;最后，writer对象被创建，并被传递给每个generator对象的generator_output方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我觉得当不同的 generator 对象产生了各自的输出后，保持内容的不变非常重要，所以我用了两个调用函数。换句话说，只有第一个 generate_context 方法被允许修改context，而第二个 generator_output 方法绝不可以。对于 generate_context 方法和generator_output方法，合理的就是只做他们应该做的事。下面是调用ArticlesGenerator类的generate_context 方法时所发生的事情，或许能帮助理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读入文件夹路径，找寻restructuredtext，每载入一个文件，先用reader对象读入，然后构造一个Article类的内容对象&lt;/li&gt;
&lt;li&gt;更新所有读入的文章的context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，generate_content方法用context 和writer来生成你所想要的最终的输出。&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>怎样学习Python（译）</title><link href="FEED_DOMAIN%20=%20http://www.example.com/zen-yang-xue-xi-pythonyi.html" rel="alternate"></link><updated>2012-12-27T10:20:00+08:00</updated><author><name>碧落</name></author><id>tag:FEED_DOMAIN = www.example.com,2012-12-27:zen-yang-xue-xi-pythonyi.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.quora.com/Python-programming-language-1/How-can-I-learn-to-program-in-Python"&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;学习程序语言最好的方法就是先学习语言基础，然后试着用它来编写一些东西（在用的过程中学）。如果你正在构建一些你确实感兴趣的东西就更好了，而不是在写书中的代码，因为构建自己的东西的过程会使你思考很多问题，这将变得更加有意义。&lt;/p&gt;
&lt;p&gt;Python是非常容易学（没有太多的语法），非常容易读的（清晰而不是隐晦），有太多的支持（模块包和库），许多大学都开这门课，所以很容易找到好的程序员来帮忙，Python也是许多网站和公司使用的语言（Quora就是用Python写的），所以应该学习一下这种很棒的语言。&lt;/p&gt;
&lt;p&gt;在线的Python教程（顺序是由菜鸟级到高手级）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.swaroopch.com/notes/Python"&gt;"A Byte of Python"&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/edu/languages/google-python-class/"&gt;Google's Into to Python Class (online)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://diveintopython.org/toc/index.html"&gt;"Dive Into Python", by Mark Pilgrim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/user/thenewboston#g/c/EA1FEF17E1E5C0DA"&gt;"The New Boston" Programming Python Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://homepage.mac.com/s_lott/books/python/html/index.html"&gt;"Building Skills in Python", by Steven F. Lott&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.greenteapress.com/thinkpython/thinkpython.html"&gt;"Think Python: How to Think Like a Computer Scientist"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;"Code Like a Pythonista: Idiomatic Python"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures"&gt;OpenCourseWare: MIT 6.00 Introduction to Computer Science and Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mit.edu/6.01/mercurial/spring11/www/handouts/readings.pdf"&gt;MIT 6.01 Course Readings (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=HlNTheck1Hk"&gt;Google's "Understanding Python" (more advanced talk&lt;/a&gt;  {墙内的同学请自行解决}&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rafekettler.com/magicmethods.html"&gt;"A Guide to Python's Magic Methods"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cleverdevil.org/computing/78/"&gt;"Metaclasses Demystified"&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;书的话，可用&lt;a href="http://www.amazon.com/Python-Cookbook-Alex-Martelli/dp/0596007973/"&gt;"Python Cookbook", by Alex Martelli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，如果你正在构建一些基于Web的东西，可以用用&lt;a href="http://flask.pocoo.org/docs/"&gt;Flask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flask是一种现代的、轻量级的、有很好的文档的Python Web框架，所以你不必花太多的时间去学习它或和它去对抗，你会不知不觉的问自己：“在没搞通它它之前，我就能够用这个框架来做自己想要做的事了吗？”Flask让你用Python编程，而不是让你往那些又大又不灵活的框架（例如Django和Rails）内写东西。&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>《rework》 and 《getting real》摘录</title><link href="FEED_DOMAIN%20=%20http://www.example.com/rework-and-getting-real-zhai-lu.html" rel="alternate"></link><updated>2012-09-26T00:00:00+08:00</updated><author><name>碧落</name></author><id>tag:FEED_DOMAIN = www.example.com,2012-09-26:rework-and-getting-real-zhai-lu.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;现实世界&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“这在现实世界里面行不通”，当你向人们介绍一个新创意时，人们总是这么回答你。这个“现实世界”听起来如此令人沮丧，……只有人耳熟能详，习以为常的事情才会胜利，即使是这些事情已经漏洞百出陈腐低效。&lt;/p&gt;
&lt;p&gt;揭开“现实世界”这个锅盖，你会发现居住在里的人都充斥着悲观主义和失望的情绪。更糟的是，他们想将别人拖进他们的坟墓。如果你是充满希望和野心的人，他们会试着说服你，你的想法是不可能的。他们会说你在浪费时间。&lt;/p&gt;
&lt;p&gt;“现实世界”并不存在，那只是人的一个借口。只是某些人为了开脱 自己的无所作为，跟你一点关系也没有。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被高估的“从错误中学习”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你真的从错误和失败里面学到什么了吗？你也许学到了别再重蹈覆辙，但是这有什么意义吗？你仍然不知道接下来该做什么。&lt;/p&gt;
&lt;p&gt;相反的应该从成功中汲取养分。成功給予真正靠得住的教材。&lt;/p&gt;
&lt;p&gt;失败并不是成功的先决条件。自然规律是，逗留在过去的失败中是无法进化的，进化是建立在成功的基础上的。&lt;/p&gt;
&lt;p&gt;眼界。另外，你应该多想想你过去做成功过什么事？那些才是你的长处，才是让你进化的前提。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计划就是瞎猜&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除非你是算命先生，长期的商业计划是种幻想。有太多的事实证明那是超出你的掌控的：市场环境、对手、顾客、经济等等。做计划让你觉得一切尽在掌握但实际上你没有。&lt;/p&gt;
&lt;p&gt;当你把计划变成猜测时，就等于进入一个危险的境地。做计划就是在用过去推导未来，等于给你戴上了眼罩。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拒绝壮大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;规模越大你就得承受更大压力、需要更专业、拥有更强的能力。&lt;/p&gt;
&lt;p&gt;有没有注意到，一个小公司希望自己变大时，大公司却想要变得灵活变通。记住，一旦你变大了就很难在不解雇人、不破坏士气、不改变你的整个商业路线的情况下收缩规模。&lt;/p&gt;
&lt;p&gt;扩张不必成为你的目标。我们也不是仅在讨论你已有员工数。 还有花费、租金、IT 基础结构、设备等。这些事情不会碰巧发生。 你来决定是否承受这些。如果你决定去承受，你也将遇到新的头痛问题。花费那么多，你强迫自己构建一个复杂的生意，有一大堆困难而高压的事情要解决。&lt;/p&gt;
&lt;p&gt;小公司并不是一个起步，小公司本身就是一个伟大的目标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作狂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工作狂的行为不但没有必要，而且愚蠢至极。过多的工作并不代表你对项目更关注，也不代表你作了更多的贡献，这仅仅意味着你干了更多的活而已。工作狂制造的麻烦比解决的麻烦多。&lt;/p&gt;
&lt;p&gt;工作狂往往不得要领。他们花大把大把的时间去解决问题，他们以为能靠蛮力来弥补思维上的惰性，其结果就是折腾出一堆粗糙无用的解决方案。&lt;/p&gt;
&lt;p&gt;如果你只是为了工作而工作，那么你就会丧失判断力。你的价值 观和决策方式都是扭曲。你没有能力去判断哪些工作值得做，哪些工作该放弃，最后搞得自己筋疲力尽，而一个筋疲力尽的人是无法作出明智的决定的。&lt;/p&gt;
&lt;p&gt;工作狂不是英雄。他们不是在节约时间而是在浪费生命。真正的英雄早已想出了办法，搞定一切，然后回家了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挠自己的痒处&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想要创造一款伟大的产品或者是某项卓越的服务，最直接、最简单的方法就是去做你自己想用的东西。设计你了解的产品——你就能很快发现它到到底好不好用。&lt;/p&gt;
&lt;p&gt;最棒的是，“解决你实际遇到的问题”会让你爱上你做的事情。 你知道问题所在并且熟知解决它的价值。这是无法替代的。毕竟，你会充满希望的在接下来的日子里继续做。 甚至会占据你余生所有时间。所以，最好还是做自己真正关心的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“没时间”不是借口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人们最常用的借口是：“时间不够。”他们宣称很想开一家公司，学一种乐器，写一本书，等等，但时间不够用。拜托，如果你善加利用，时间总是有的。&lt;/p&gt;
&lt;p&gt;把看电视或玩魔兽的时间腾出来完成你的创意；把10点上订改成11点上床，这不是怂恿你通宵达旦或是一天干足16个小时——我们要说的是，第周匀出一些业余时间来，就足够你去做些事情了。&lt;/p&gt;
&lt;p&gt;当你拥有某种强烈的渴望时，你就能挤出时间来——不管你身上是否背负着其他责任。事实上，真相是大多数的渴望并不是那么强烈。于是他们拿时间当借口来自我开脱。别给自己错口。&lt;/p&gt;
&lt;p&gt;另外，永远会有正当其时的时候，你总会觉得自己会么太年轻，要么太老，要么太忙，太穷，或是别的什么原因。如果你总是为遇到一个完美时机而发愁，那么，完美的时机绝对不会到来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画沙为界，立场明确&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;坚定的信念能为你赢得超级粉丝，他们会为你马首是瞻，会舍身保护你，他们充满激情的口碑传播将胜过这世间一切的广告。&lt;/p&gt;
&lt;p&gt;强大的主见，也是要付出代价的，在这个过程中，会有人诋毁你，说像傲慢，冷漠。没办法，这就是人生，有人喜欢你，就有人憎恨你。如果你的说法没有引起任何人的心烦意乱，只能说明你的推广力度可能还不够。（也可能代表你比较无趣）&lt;/p&gt;
&lt;p&gt;对我们来说，我们的产品所不能处理的和我们的产品所能处理的一样令人感到骄傲。&lt;/p&gt;
&lt;p&gt;我们的产品不适合每一个人，没有关系，我们愿意为了那些更加深爱我们的客户而放弃另一部分客户。这就是我们的立场。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找好退路无异于失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你还常常听到：“你的退出战略是什么？（万一不成功，你怎么办）”甚至在你刚开始启动时就听到它。这些人不知道怎么开始就要想到怎么结束？急什么呢？如果在全情投入之前就想怎么撤出，这种逻辑不是一般的混乱。&lt;/p&gt;
&lt;p&gt;你正打算恋爱一场就计划着分手？你在第一次约会时就签订婚前协议？你会在婚礼早上先约见离婚律师？那也太荒谬了吧。&lt;/p&gt;
&lt;p&gt;你需要的是承诺战略而不是退出战略。你要考虑的是你的项目怎样发展和成功，而不是怎样撤退。如果整个战略是基于撤退的，一开始你就不会有机会成功。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件受限是好事&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“我没有足够的时间、钱、人手、经验”。不要现无谓的抱怨了。“少”不是什么坏事。“条件受限”貌似缺陷，实力优势。有限的资源能激发你在现有的条件下完成任务的能力。没有一点浪费空间，一切都需要你发挥最大的创造力。&lt;/p&gt;
&lt;p&gt;你见过囚犯用肥皂和汤勺制作武器吗？你们是“创新”的典范。只有在条件受到限制时，我们才会发挥出“小材大用”的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与其做个半成品，不如做好半个产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时做N件事的结果就是：一大把绝妙的点子最后被转化成一个蹩脚的产品。&lt;/p&gt;
&lt;p&gt;有舍才有得，砍掉多余的野心，你就会发现慢慢做一件正事要胜过毛毛躁躁地做一堆傻事。&lt;/p&gt;
&lt;p&gt;很多东西都是越简短越好。拿起斧子动手砍吧，为了一个“伟 大”的起点，让我们把那些“挺不错”地枝节给砍掉吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注不变因素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多公司和人都关注即将到来的大事件。他们热衷于新鲜热辣的事物，追逐最新的潮流和技术。&lt;/p&gt;
&lt;p&gt;这是一条愚笨之路。一旦走上这条路，你就会关注时髦、放弃本质，把注意力放到不断变化的事物上，而不是持久不变的事物上。&lt;/p&gt;
&lt;p&gt;你的事业的核心应该建立在不变的基础之上。你应该投资于那些人们现在需要，并且十年后仍然需要的事物上。&lt;/p&gt;
&lt;p&gt;要记住，时尚会凋零。只有当你聚焦于长久的功能时，你才会发现自己把握住了永不落伍的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会议有毒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;世人最可恨的打扰莫过于开会。原因是：&lt;/p&gt;
&lt;p&gt;会议中充斥着纸上谈兵和抽象的概念，大多是不切实际的。
会议中能传达的信息量少之又少。
人们在会议中容易跑题，堪比暴风雪里的芝加哥出租车还容易迷失方向。
会议要求做充分的准备，但是大多数人没有时间准备这些。
会议制定的议程常常是模糊的，根本就没有人真正清楚目标是什么。
会议中难免会轮到那么一两个低能人士发言，于是大家的时间都浪费在他们的扯淡上了。
会议具有自我繁殖功能。一次会议总能导致另外一次，以及再导出下一次，生生不息……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人人都得干活&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个小团队里，你需要的是干活的人，而不是监工。每个人都得做事，没有人可以袖手旁观 。&lt;/p&gt;
&lt;p&gt;这意味着你在招聘中要避免招到监工型的人物，这些人喜欢对别人谆谆教导。对于小团队来讲监工型的人就是累赘。&lt;/p&gt;
&lt;p&gt;监工们还喜欢把人拖去开会。实际上，会议是监工们最好的朋友，因为只有在开会时才显得出他们的重要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拒绝照搬 &amp;amp; 将你的产品去商品化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时候，照猫画虎也是一种学习过程，就好像艺术系的学生通过临摹美术馆的作品来学习绘画。当你还是一个学生时，这种模仿是一种很有效的学习工具。不幸的是，商业战场上的模仿却不招人待见。而这也意味着你打算通过当盲从者或抄袭者的方式来建立你的事业，这注定是一个失败模式。&lt;/p&gt;
&lt;p&gt;模仿的问题在于，简单的复制扼杀了深层的理解——而理解才能激发成长。你不但要知其然，还要知其所以然。而当你复制时，你会忽视这一点。你照搬的只是表面，而不是本质。&lt;/p&gt;
&lt;p&gt;一旦你扬名立万，模模仿者会蜂拥而至，这就是生活。但你可以用一种绝佳的方式来保护自己不被 他们吞没：让你自己成为你的产品或服务的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做得比对手少&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传统智慧告诉我们，要想打败竞争者就要胜人一筹。如果人家有 4 个功能，你就得 5 个（或者 15 个，25 个）。如果人家花了$20,000，你就得花 $30,000。如果人家有 50 个员工，你就得要 100 个。&lt;/p&gt;
&lt;p&gt;这样的冷战式的攀比思维会把人引上绝路。一旦被卷入“军备竞赛”，你就陷入了一场无止境的战争，这场战争会让你耗费大量的金钱、时间和动力。并且使你陷入长期的防御战中。处于防御状态的公司是没有预见力的；他们只能后知后觉，他们无法领跑，只能尾随。&lt;/p&gt;
&lt;p&gt;那么你应该怎么做呢？比你的竞对手做得少，以此来打败他们。让自己去解决简单的问题，把那些纠结的、麻烦的、艰难的、讨厌的难题留给竞对手去解决。不要总想着去胜人一筹、去超过别人，试试相反的做法。&lt;/p&gt;
&lt;p&gt;不要因为你的产品或服务不如别人的花哨就感到自惭形秽。把他们做得醒目高调，并引以为傲。就像对手那些强有力的销售他们多功能的产品一样销售你那简约的产品。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谁在乎他们在干什么&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管怎样，终究是不值得过于关注你的竞争者。为什么？因为关注别人太多会让自己受到困扰。他们现在在做什么？他们下一步呢？我们该怎样作出回应？&lt;/p&gt;
&lt;p&gt;每一个小小的动作都会被分析一下。那是一种可怕的心态。这会产生不可抗拒的压力和焦虑。这样的想法会滋长不好的东西。&lt;/p&gt;
&lt;p&gt;这是没有意义的事情。竞争者的风景时时在变。你的竞争对手明天一个样儿，今天一个样儿。完全在你控制之外。去担心你所不能控制的事情有意义吗？&lt;/p&gt;
&lt;p&gt;过于关注竞争者会混淆你的视野。当你一直吸收别人思想时， 你的机会则会减少。你变得反动而不是充满想象力。你只不过是将你竞对手的产品换了个包装。&lt;/p&gt;
&lt;p&gt;如果你打算做一个“the iPod killer”或“the next Pokemon”，你已经死了。你是在承认你的竞争者所设定的参数。你没有跳出 Apple 的套路。他们制定了这个游戏规则。你不可能打败制定规则的那个人。你必须重新制定一个规则，而不是稍微改建一点点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;养成对客户说“不”的习惯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说“好的”很容易。我们很容易接受同意一个新功能、同意一个过于乐观的截止日期、笑纳一个平庸的设计。很快，一大堆你曾经说“yes”的事情就发生连锁反应，很多你不想要的东西越堆越高，甚至你都看不出原来想要的东西。&lt;/p&gt;
&lt;p&gt;别相信“顾客永远是对的”这类的话。如果你是一个大厨，你的很多客人说你做的菜太咸或者太烫，你可以改。但是如果有一些挑剔的老主顾要求在宽面条里面加些香蕉，你千万不要理会他们，没关系。若是为了少数顾客的要求而毁了产品不值得。&lt;/p&gt;
&lt;p&gt;你的目标是确保你的产品与就是和你合拍的产品，你就是你自己产品最踏实的粉丝。你是最信赖它的那个人。那样的话，你会说：“我想你也会爱它的，因为我爱它。”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要攀客户的高枝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也许你曾经见过这样的场景：一个顾客向一家公司投了很多钱。这家公司想要尽可能的取悦那个顾客。为了迎合这个客户的要求而改变自己的产品，渐渐地，你的产品就会脱离普遍客户的基础。&lt;/p&gt;
&lt;p&gt;而且，突然有一天，这个大客户绝尘而去，公司则会背负一个包袱——这个产品是围绕着一个已经离开了的人设计的。而其他人没法用。&lt;/p&gt;
&lt;p&gt;人在变，环境在变，你不可能满足所有人的所有要求。公司要对某一类型的客户全情投入，而不是对某个善变的客户唯唯诺诺。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一夜成名只是传说&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你不会瞬间大红大紫，也不会一夜暴富，你所了解的那些道听途说的“一夜成名”的故事，深挖一点，你就能发现这些成功人士在到达引爆点之前，都已经在这个方向 上苦熬了很长时间。&lt;/p&gt;
&lt;p&gt;把一夜成名的迷梦换成一步一个脚印的成长行动吧。道路很艰难，但你必须充满耐心。你得用功去做，在遇到伯乐前，你得努力很长时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;员工不是13岁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你把员工当孩子看时，人们就会像孩子一样行事。&lt;/p&gt;
&lt;p&gt;当公司里事事都要上报审批时，你就创造出了一种无脑文化。你成功地制造出了老板和员工之间的对立关系。这种关系在咆哮着：“我不相信你！”&lt;/p&gt;
&lt;p&gt;当你处处限制员工，比如禁上他们在上班时访问外部网站或是开小差，你会得到什么好处？什么也得不到。人们需要开小差，这有助于打破整日的枯燥单调，花点时间上上Youtube或Facebook不会失去什么。&lt;/p&gt;
&lt;p&gt;如果你要监控你的员工，你得想想你要花多少时间和金钱来监管员工。你浪费了多少钱去安装监控软件？你浪费了多少人力资源去监视员工？你浪费了多少时间去写没有人会看的规章制度？看看这些成本，你很快就发现，对员工的不信任才是最大的开销。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建构从简
做得比竟争对手少&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常规的思维方式告诉我们，不管竞争对手做什么你总是要比他们加多一些。如果他们有4个特色功能，你就需要做出5个。&lt;/p&gt;
&lt;p&gt;这种强调更多一层的冷战竞争思维是行不通的死胡同。&lt;/p&gt;
&lt;p&gt;是什么问题一直困扰你？&lt;/p&gt;
&lt;p&gt;为自己而做这个软件&lt;/p&gt;
&lt;p&gt;一个很好的做软件的方式就是一开始用它来解决你自己的问题。由于你自己变成了软件的目标受众因此你会知道什么是重要的什么不是。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找个敌人&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挑选一场战斗&lt;/p&gt;
&lt;p&gt;有时了解你的应用程序应该做成什么样子的最佳方式就是，认识到它不应该成为什么。搞清楚你的软件的对手是谁，就象点一盏灯，能照亮你前行的道路。&lt;/p&gt;
&lt;p&gt;当我们决定开发项目管理软件的时候，我们清楚的知道微软项目软件（Microsoft Project)是这个小舞台上的一个庞然大物，大猩猩。我们不是去害怕这个大家伙，相反的我们把它做为一个刺激我们前进的引擎。我们决定Basecamp将做成一个完全不同的项目管理软件，就是反Microsoft Project而行。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它不该成为一种交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你越不把软件当作一种交易去做，你就越能做得好。把它控制在一个你能把握的小范围内，你就有可能真正地享受过程。&lt;/p&gt;
&lt;p&gt;如果你做这个软件一点不兴奋，那就是什么地方出了问题了。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更小的质量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你越做到精益，改变越容易&lt;/p&gt;
&lt;p&gt;一个物体的质量越大，改变方向需要的能量越多。物理世界的这个真理同样适用于商业世界。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少改变的成本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过减少改变的阻碍保持灵活&lt;/p&gt;
&lt;p&gt;改变是你最好的朋友，改变的代价越大，你越不可能做出改变。&lt;/p&gt;
&lt;p&gt;这就是保持精益真正帮助你的地方。很短时间内改变的能力是小团队与生俱来而大团队永远不会有的。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么理念才是伟大的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过亲切友善和人性化来把自己和大公司区分开来&lt;/p&gt;
&lt;p&gt;竭尽全力将你的软件定位在一个点上。你的软件代表的是什么？它到底是有关什么的？在你开始设计或写任何代码之前你必须清楚地知道你做这个产品的目的 — 它的前景。把理想放大些。为什么要有它？它和其他类似产品不同的地方在哪里？ &lt;/p&gt;
&lt;p&gt;你的理念必须是简洁的。应该一句话就能把想法传达到。以下是我们每个产品的理念：&lt;/p&gt;
&lt;p&gt;Basecamp: 项目管理即是沟通&lt;br&gt;
Backpack: 把生活中的凌乱归整&lt;br&gt;
Campfire: 用及时通讯软件来开展团体交流太逊了&lt;br&gt;
Ta-da List: 和及时贴便条做斗争&lt;br&gt;
Writeboard: 用不着麻烦微软的WORD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在初期时忽略细节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先粗后细&lt;br&gt;
我们太过痴迷于细节。&lt;/p&gt;
&lt;p&gt;当问题成为问题的时候才去担心&lt;/p&gt;
&lt;p&gt;不要把时间浪费在还未成为问题的问题&lt;/p&gt;
&lt;p&gt;软件要有自己的主张&lt;/p&gt;
&lt;p&gt;你的软件应该要有倾向&lt;/p&gt;
&lt;p&gt;伟大的软件必须要有自己的理想。伟大的软件必定是有倾向的。当人们使用软件的时候他们不只是在看功能，同时他们也在寻找一个解决方案，一种理想。决定你的理想而后追求不懈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分，而不是残缺不全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建一半产品，而非产品有一半缺陷&lt;/p&gt;
&lt;p&gt;对于Basecamp，我们从Message开始。我们知道它是这个应用的灵魂，所以我们暂时忽略了Milestone，Todo-list，以及其他功能。这让我们基于真实的使用情况来决定下一步怎么走，而不是凭空猜测。&lt;/p&gt;
&lt;p&gt;从一个精简，聪明的应用开始，然后让它得到关注。就能开始在你构建的坚实基础上添砖加瓦。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从说“不”开始&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不轻易实现功能&lt;/p&gt;
&lt;p&gt;构建部分而不是残缺不全的秘诀是说不。&lt;/p&gt;
&lt;p&gt;每一次你对一个功能说yes时，你正在收养一个小孩。你必须带着你的孩子通过一连串事件（例如设计，实现，测试等）。一旦这个功能出现了，你就被拖住了后腿。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从概念到实施&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;脑力激荡&lt;/p&gt;
&lt;p&gt;先要有个点子。这产品要给我们带来什么？&lt;/p&gt;
&lt;p&gt;这个阶段并不是有关一些实施的具体细节。这是一个大方向。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纸上草稿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;草稿是迅速的，实用的和便宜的，这就恰恰是你想要开始的方式。涂些东西，画些东西，方块，圆圈，线条，什么都行。把你脑子里的想法搬到纸上。这阶段的目标是把概念转成一个界面设计的粗稿。这个阶段完全是试验性的。不存在什么答案是错误的。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建HTML页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做一个HTML版本的功能界面（或一个区间界面或流程界面，如果这么做更合适的话）。发布一个实在的东西，这样一来大家就都可以看到它出现在屏幕上的样子。&lt;/p&gt;
&lt;p&gt;以Basecamp而言，我们先做“发布一条信息”的界面，然后是“编辑信息”的界面，然后一步步下去。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上代码编程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当模型框架看起来过得去又兼具一些足够必要的功能时，就是开始上代码编程的时候了。 &lt;/p&gt;
&lt;p&gt;界面先行&lt;br&gt;
开始编程之前先设计界面&lt;/p&gt;
&lt;p&gt;界面就是你的产品。你向人们销售的产品正是他们能看到的。如果你最后才推出界面，就会出现缺口。&lt;/p&gt;
&lt;p&gt;我们先从界面开始，所以从一开始我们就知道这个应用看上去如何，给人感觉怎样。在开发过程中，界面将会不断的改进。合理吗？易用吗？是不是解决了手里的问题？这些问题只有你和真实的界面打交道的时候才能回答。设计优先让你保持灵活而且让你能更早地回答那些问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;震中设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;始于页面的核心然后向外延展&lt;/p&gt;
&lt;p&gt;这意味着，一开始要忽略细枝末节的东西：导航条或者导航标签、页脚、用色、边栏、标识等，从震中着手，先设计页面中最重要的内容。&lt;/p&gt;
&lt;p&gt;页面赖以生存的是其核心。只有当这个单元完成之后你才能开始考虑页面中次重要的元素。次重要的元素完成之后，你再转战第三重要的元素，以此类推。这就是震中设计。 &lt;/p&gt;
&lt;p&gt;震中设计规避了传统中 “先搭建框架，再填充内容”的方式。在那种方式里，人们先建立好页面布局，然后把导航条包含进去，然后插入有关销售推广方面的东西，到最后才把核心功能——页面的实际意义所在用来填充剩下的空间。这是本末倒置的做法。&lt;/p&gt;
&lt;p&gt;震中设计让你从一开始就关注于真正重要的部分。先做必需要的，再做其他的。结果是给用户一个更友好、重点清晰的界面。并且，这样可以让你马上和设计、开发人员展开对话而不是等到页面所有部分都各就各位之后。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能定义一点用都没有&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不要写功能定义文档&lt;br&gt;
这些蓝图文档通常和成品几乎毫无关系。 &lt;/p&gt;
&lt;p&gt;功能定义文档是虚幻的&lt;br&gt;
功能定义文档是无关痛痒的&lt;br&gt;
功能定义文档只能达成虚幻的共识&lt;br&gt;
功能定义文档逼迫你在拥有最少资讯时作出最重要的决定&lt;br&gt;
当你刚开始构建时，你知道的是最少的。而做得越多，用得越多，你才能了解得越多。这才是你应该做出决定的时候——即当你有足够多信息，而非信息少的时候。&lt;br&gt;
功能定义导致功能泛滥&lt;br&gt;
功能定义让你无法变通、变化和重新评估&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟著潮流走&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對於新的方向保持開放的態度
网路应用程式的美丽之处在于它的流体性。你没有必要把它包装在一个盒子里，寄送出去，然后枯等几年后的下一个版本；你可以一边进行一边调整。宝持开放的态度，尤其是您原始的点子可能不是最好的点子这事实。&lt;/p&gt;
&lt;p&gt;看看 Flickr。一开始它是个叫做The Game Neverending（无结尾游戏）的线上游戏，但它的创始人很快的发现游戏内分享照片的功能比起游戏本身，反而是个&lt;/p&gt;</summary><category term="读书"></category></entry><entry><title>怎样成为更好的写作者【译】</title><link href="FEED_DOMAIN%20=%20http://www.example.com/zen-yang-cheng-wei-geng-hao-de-xie-zuo-zhe-yi.html" rel="alternate"></link><updated>2012-08-01T00:00:00+08:00</updated><author><name>碧落</name></author><id>tag:FEED_DOMAIN = www.example.com,2012-08-01:zen-yang-cheng-wei-geng-hao-de-xie-zuo-zhe-yi.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.quora.com/How-does-one-become-a-better-writer"&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回想大学时代，一次我和Sanket在酒吧闲逛，想找一个女孩聊天，但那总是极不愉快的记忆。没有人和我聊天会超过半分钟，而每个女孩会因为Sanket的笑话大笑一个小时。甚至十年后我还认为她们仍然因他的笑话在开心地大笑中。一次，他对我说：“你说话时，这些女孩有些不耐烦，你的故事总是太长，从现在起，你讲故事时省略所有的无关的句子。”我们俩都从计算机科学专业的毕业了，从那以后，我再也没有见过他，但是那个关于写作（和沟通）的最重要的建议我却一直记得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;成为一个更好的写作者的33个建议。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写下任意你想写的东西， &lt;strong&gt;然后去掉第一段和最后一段。&lt;/strong&gt; 这是一个很有趣的规则，这有点像知道了未来，但你仍然不能改变它。换句话说，即使你知道了这个规则，运用它开始写文章了，如果你把写好的这篇文章去掉第一段和最后一段它会变得更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每天积极排便。&lt;/strong&gt; 你不会在其他任何写作指导上看到这条。如果你的身体不动了，你的头脑也是不会动的。如果一定要吃东西时可以吃些水果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在写第一行字时流血。&lt;/strong&gt; 我们都是人类，电脑可以打赢官司，可是还是不会写小说。你想让人们与你联系，你就必须变成一个人。Penelope Trunk在几周前开始发表文章时说：“我用头打碎了一个灯泡，到处都是血，还有玻璃片，我还拍了照片。”那是真血，我妻子最近在写一篇文章的第一行时痛苦至极，她不得把它写下来。太多的人为此而痛苦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不需要得到许可。&lt;/strong&gt; 换句话说，永远不要说“我觉得”（或者更糟糕的“恕我直言”）。我们知道这就是你的想法，是你正在写东西呢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多写。&lt;/strong&gt; 我用了整个90年代写很差的科幻，写了5部很差的小说，数十篇很差的故事。但我学会了怎么控制大量的退稿，学会了怎么把两个词组合在一起。在我的想象中，我已经得了普利策奖，但事实是我收到了超过100封退稿信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多读。&lt;/strong&gt; 不读的话是不会写出来的。要大量读，当我写出5部烂小说的时候，我就是每天在坚持读（我当时的工作是程序员，那只会花掉我五分钟的时间，因为我的程序一直正常，我需要的只是“maitain”他们。）我读我可以读到的一切。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在写之前先读。&lt;/strong&gt; 每天在我开始写作前，我总是花30~60分钟时间读高质量的短篇小说、诗歌或者散文。还有Denis Johnson、 Miranda July、 David Foster Wallace、 Ariel Leve、 William Vollmann、 Raymond Carver这些人的书，这些人都是顶尖的作家。一定要读那个级别的作品，否者你不会有任何进步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;咖啡。&lt;/strong&gt; 我在写之前要喝三杯咖啡。没有咖啡就是没有创造力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打破物理世界的规律。&lt;/strong&gt; 在文字中是没有时间的，没有事情是必须按照顺序发展的。不要试自己的文字变得不知所云，但也不要被物理世界所困。 &lt;a class="reference external" href="http://www.jamesaltucher.com/2010/12/advice-i-want-to-tell-my-daughters/"&gt;给我女儿的建议&lt;/a&gt; 就是一个例子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保持诚实。&lt;/strong&gt; 说出每个人都想的，但是别人不说的。你说出的话会使一些人不高兴，但更多的人会心怀感激。否者你就不是在表达有价值的事。做皇帝的新装中的小男孩吧，如果你做不到，就不要写了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要伤害任何人。&lt;/strong&gt; 这一条和上一条有冲突，但是我永远不想伤害任何人。我也不会尊重想伤害别人的人，不要做一个坏人。 &lt;a class="reference external" href="http://www.jamesaltucher.com/2011/01/was-buddha-a-bad-father/"&gt;佛陀是一个坏父亲吗&lt;/a&gt; ?就阐述了这个道理。&lt;/p&gt;
&lt;p&gt;（未完待续）&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="写作"></category></entry><entry><title>随记Lisp</title><link href="FEED_DOMAIN%20=%20http://www.example.com/sui-ji-lisp.html" rel="alternate"></link><updated>2012-07-02T00:00:00+08:00</updated><author><name>碧落</name></author><id>tag:FEED_DOMAIN = www.example.com,2012-07-02:sui-ji-lisp.html</id><summary type="html">&lt;p&gt;看完《黑客与画家》，受到YC的老大的鼓动，学了一段时间的Lisp，当然，Lisp是一种编程语言，是第二古老的编程语言。它不仅在50多年前诞生的时候带来了诸多革命性的创新并极大地影响了后来编程语言的发展，即使在一大批现代语言不断涌现的今天，Lisp的诸多特性仍然未被超越。&lt;/p&gt;
&lt;p&gt;Lisp诞生的时候，就包含了九种新思想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件结构（即"if-then-else"结构）。现在大家都觉得这是理所当然的，但是Fortran I就没有这个结构，它只有基于底层机器指令的goto结构。&lt;/li&gt;
&lt;li&gt;函数也是一种数据类型。在Lisp语言中，函数与整数或字符串一样，也属于数据类型的一种。它有自己的字面表示形式（literal representation），能够储存在变量中，也能当作参数传递。一种数据类型应该有的功能，它都有。&lt;/li&gt;
&lt;li&gt;递归。Lisp是第一种支持递归函数的高级语言。&lt;/li&gt;
&lt;li&gt;变量的动态类型。在Lisp语言中，所有变量实际上都是指针，所指向的值有类型之分，而变量本身没有。复制变量就相当于复制指针，而不是复制它们指向的数据。&lt;/li&gt;
&lt;li&gt;垃圾回收机制。&lt;/li&gt;
&lt;li&gt;程序由表达式（expression）组成。Lisp程序是一些表达式区块的集合，每个表达式都返回一个值。这与Fortran和大多数后来的语言都截然不同，它们的程序由表达式和语句（statement）组成。
区分表达式和语句，在Fortran I中是很自然的，因为它不支持语句嵌套。所以，如果你需要用数学式子计算一个值，那就只有用表达式返回这个值，没有其他语法结构可用，因为否则就无法处理这个值。
后来，新的编程语言支持区块结构（block），这种限制当然也就不存在了。但是为时已晚，表达式和语句的区分已经根深蒂固。它从Fortran扩散到Algol语言，接着又扩散到它们两者的后继语言。&lt;/li&gt;
&lt;li&gt;符号（symbol）类型。符号实际上是一种指针，指向储存在哈希表中的字符串。所以，比较两个符号是否相等，只要看它们的指针是否一样就行了，不用逐个字符地比较。&lt;/li&gt;
&lt;li&gt;代码使用符号和常量组成的树形表示法（notation）。&lt;/li&gt;
&lt;li&gt;无论什么时候，整个语言都是可用的。Lisp并不真正区分读取期、编译期和运行期。你可以在读取期编译或运行代码；也可以在编译期读取或运行代码；还可以在运行期读取或者编译代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lisp的代码组织形式符合的是逻辑的，是数学的。这也是Lisp没有流行起来的原因之一吧，更多的人习惯与按部就班的方式写代码，懒于思考。Lisp不仅是一种编程语言，更是一种思维方式，是数学的思维方式。&lt;/p&gt;</summary><category term="lisp"></category></entry><entry><title>人人都能用英语</title><link href="FEED_DOMAIN%20=%20http://www.example.com/ren-ren-du-neng-yong-ying-yu.html" rel="alternate"></link><updated>2012-05-20T00:00:00+08:00</updated><author><name>碧落</name></author><id>tag:FEED_DOMAIN = www.example.com,2012-05-20:ren-ren-du-neng-yong-ying-yu.html</id><summary type="html">&lt;p&gt;李笑来老师是一位真正的老师，现在老师这个词已大大贬值，我说的“老师”是“老师”的真正含义。&lt;/p&gt;
&lt;p&gt;《人人都能用英语》，书名听起来很普通，但却是我看过的同类书籍中最好的书。&lt;/p&gt;
&lt;p&gt;在开场白中笑来告诉我们“除非有外来者带来其他领域的知识与经验，任何一个领域都不可能大幅度进步。”于是乎，一本关于英语学习的书要从别处谈起。从科学的角度来看，大脑的可塑性极强，大脑是一个“用进废退”的机器。过去十分流行的大脑区域论是错误的（至少不是完全正确的），大脑可以重新组织自己。而为什么成年之后，第二语言的学习变得很困难呢？这位是由于第二语言所使用的脑图要与已形成强大势力的母语的脑图进行竞争。学习这件事是，相信自己一定能学好并不保证自己一定能学好：但反过来，相信自己不可能学好，那最终一定不会学好。这就是所谓的“自证预言”，总是在负面起作用。一个简单的例子来说明自证预言：一家银行本来运作得好好的，但不知怎么就有谣言说这家银行要倒闭了。流言越穿越广，越来越多的人开始信以为真，开始有人跑到银行把自己的存款提走；进而恐慌开始散布，并且变得真实，更多的人跑到银行提走自己的存款……最终，挤兑发生了，银行倒闭了。&lt;/p&gt;
&lt;p&gt;教育实际上是自己的事。自己早一天觉悟，就早一天挣脱枷锁，就多一天的自由。老师的力量是相当有限的，人还是靠自己比较靠谱。&lt;/p&gt;
&lt;p&gt;在正文中，从重塑语音、多朗读、查词典、搞定语法、多精读、勤练写作铺开。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;良好的沟通需要：思考能力，最好能从对方的角度思考；组织能力，先说什么后说什么效果可能完全不同；观察能力；文字理解能力，听清楚，听得懂；足够的知识储备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可怕的并不是“不会说”，而是“没什么可说的”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有的语言都不是独立存在的，任何语言都是用来表达思想和传递信息的。有些人说语言很美，美丽的不是语言，而是思想。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;老外不一定靠谱，外教只是外语的母语使用者而已，不一定有很强的思考能力。而且老外也是人，是一种智能生物，你发音错、语法错，他们会根据当时谈话的场景、所谈话题、肢体语言猜个八九不离十，给你一种“我口语不错”的幻觉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跟读训练：精读文本，反复听录音，做到自然语流修正标记，反复跟读，录音矫正，背诵。练习十篇，语音、节奏、记忆力、理解力都会脱胎换骨。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大多数的失败，最严重却又最隐蔽的原因：对短期收益要求太高，对长期收益要求太低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只要时机恰当，方法正确，积累到一定程度，同时熟练使用若干种语言都是有可能的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;朗读是语文教育的最古老、最普遍、成本最低、效果最好的训练方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读理解速度的瓶颈在于理解速度而非输入速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们记忆人脸、记忆歌曲曲调、记忆文章段落的时候所使用的方法模式是个不相同的。一个人的记忆同样也会影响他的理解能力。记忆力往往是这样的：记住的东西越多，记得住的东西就越多。一个人记忆力的发展空间取决于他现有的记忆力。理解力也如此，已经理解的东西越多，能够进一步理解的东西也就越多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;朗读训练会在不知不觉中培养文字的韵律感，许多人说话写字很拗口，是朗读训练太少的结果，不论什么语言都如此。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;母语使用者知道关于自己母语的很多自己并不知道自己知道的知识——往往不知所以然的人称之为“母语直觉”。当我们使用母语的时候，往往是“整块处理”，只要能用模糊识别就用模糊识别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最有用却无成本的学习方法——朗读、查字典。不查字典者死!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们身体的每一个器官或多或少拥有一定的“进化能力”。弹琴久了，手指就会变得跟加灵活；长期锻炼，心肺功能就会更加强大……进化能力最强的是大脑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;英语老师课上做什么？大抵就是把昨天晚上查过的单词、词组，以及他通过查词典及其他工具书在动脑筋搞明白的句子给学生们讲一遍。而学生呢？坐在下面听。本质上没有参与阅读理解的过程——那个过程应该有苦恼、迷茫、无助、慌张、和恍然大悟；所以学生根本没有动脑，于是顶多是以为自己搞懂了。事实上，没有之前两个境界的铺垫，蓦然回首，灯火阑珊处什么都没有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽快摆脱老师的依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;望文生义的根源第一是懒，第二是自以为是，第三是既懒又自以为是而产生、又恰恰因为既懒又自以为是而难以克服的自我局限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;词汇量不是问题，概念量才是瓶颈。高级思维活动依赖概念（而非词汇本身）的理解、组织、扩展、应用、重新理解、重新组织、进一步扩展和进一步运用。清楚地理解每一个遇到过的概念（不管什么语言），是最为省时间高效率的生活方式。这个不仅仅影响学习，还会影响一个人的整个生命过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拒绝学习等于拒绝进化。“我没学过中文语法不一样能够用好中文吗？”这是幻觉，你母语没用你想想中的好，只是不由自主地高估了自己，而在高估自己的同时又降低了标准。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查语法书：锁定功能词，检索索引，逐一翻阅相应内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生活的关键本质就在于其复杂性与不确定性。对语法的憎恨和厌恶，实际上是“头脑简单”、“思考粗暴”、“天真幼稚”的表现。我们生活在这个世界，“有例外的规则”无处不在，而相反的“没有任何例外的规则”相对要少很多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搞定语法只能靠自己。靠自己的阅读能力、计划执行能力、以及可以慢慢培养出来的耐心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果一个人学会查词典，学会差语法书，再肯多查几部字典、多查几本语法书，他基本上就具备了在中国任何一所民办英语培训学校做老师的基本素质了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习外语的真正难点在于母语和外语这两种语言之间并非一一对应的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读书慢的一个重要原因是用很啰嗦的方式记笔记。摘录原文、写下批注、甚至干脆些一整篇文章，加以分类。不记笔记的人无法理解这种时间精力耗费的合理性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读好书一遍是不够的。读书的最大惊喜往往来自反复阅读中的“偶然”发现。阅读会刺激思考，思考进而会改变阅读的质量，两者相辅相成，相生却永不相克。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“读懂了文章，题却做不对”，幻觉！只是在读的过程中不知不觉启动自己的“模糊拼接”能力，只是自己以为读懂了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搞清楚每句话的含义。理解每句话、每个段落之间的关系，处理段落还有另外一个任务——概括。整理词汇。反复阅读若干遍。复述文章，实际上需要很多综合能力：记忆力、逻辑能力、转述能力、重新组织能力、在理解能力。养成若干天后复习的习惯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读任何文章都可以这样“品”，读诗品意境，读散文品心境，读报纸品现实，读小说品情节。为了学而读，还要在读与品之外考虑很多事，作者为什么这样写，这些话好在哪或差在哪，要我写该怎么写……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;积累阅读量是提高阅读理解速度的唯一方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语言文字是用来表达、记录、交流思想的。如果有什么真正美丽或更加美丽的话，是思想，而不是语言本身。美丽的思想，用任何语言表达都美丽。用一种语言表达光芒四射，用另一种语言表达同样四射光芒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于选择好书，可从作者入手，买牛人的书；可从版次入手，买第二版以后的书。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝大多数最终拥有良好写作能力的人基本上都是靠自己，多读、多写、多改、多练、多观察、多思考、多讨论、多积累……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;秘密武器——复述，应该把复述变成习惯。全面理解、提取要点、理清脉络、合理重组，这些都是思维能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="读书"></category></entry></feed>